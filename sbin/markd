#! /usr/bin/env python3

description = '''
This is a generic mKTL daemon. The real work is done in the subclass of
Daemon.Store (if any); this executable parses command-line flags, invokes
a Daemon.Store instance to handle any/all requests, and otherwise waits
until the program is terminated.

The store name and configuration identifier must be specified in order
for this daemon to function correctly; all other arguments are optional.
'''

epilog = '''
For example, to run markd for the store 'rosebud', using the existing
on-disk configuration identified as 'innocence', first using the default
caching implementation, and then with a custom Kane.Sled subclass of
Daemon.Store, one might invoke:

    markd rosebud innocence
    markd rosebud innocence --module Kane --subclass Sled
'''

import argparse
import importlib
import threading


def main():

    config = parse_command_line()
    store = start_store(config)

    while True:
        try:
            main.shutdown.wait(30)
        except (KeyboardInterrupt, SystemExit):
            break


main.shutdown = threading.Event()



def parse_command_line():

    arguments = dict()
    arguments['formatter_class'] = argparse.RawDescriptionHelpFormatter
    arguments['description'] = description
    arguments['epilog'] = epilog

    parser = argparse.ArgumentParser(**arguments)

    parser.add_argument('store', help='Name of this mKTL store.')
    parser.add_argument('identifier', help='Unique identifier for the mKTL configuration associated with this specific daemon; this is an arbitrary string, and must be unique for this daemon within this store.')

    parser.add_argument('-m', '--module', help='Module to import which contains the Daemon.Store subclass to invoke.', default='mKTL.Daemon')
    parser.add_argument('-s', '--subclass', help='Specific Daemon.Store subclass to invoke; this is the bare class name (Store), not a fully qualified class name (mKTL.Daemon.Store).', default='Store')
    parser.add_argument('-c', '--configuration', help='File containing daemon-specific mKTL configuration of items; if specified, the contents of this file will supplant any cached daemon-specific configuration for this identifier.')
    parser.add_argument('-a', '--appconfig', help='Custom configuration file location, not used directly by mKTL, but made available to the Daemon.Store subclass. How this directive is used is entirely up to the application-specific subclass code.')


    parsed = parser.parse_args()
    return parsed


def load_configuration(store, identifier, filename):
    """ Pre-load the user-specified mKTL configuration; this is expected to
        be a JSON-formatted description of a sequence of items, as defined
        in the configuration syntax section of the mKTL documentation:

        https://keckobservatory.github.io/mKTL/configuration.html#storage

        Allowing the caller to specify the location of this file prevents
        the need for tight coupling between mKTL's configuration storage
        scheme and any external configuration management scheme employed
        by the caller.
    """

    # The mKTL import is here (as opposed to the top of the script) to allow
    # running this executable in contexts where the mKTL module may not be
    # on the default search path.
    import mKTL

    contents = open(filename, 'r').read()
    items = mKTL.Protocol.Json.loads(contents)
    mKTL.Config.File.save_daemon(store, identifier, items)



def start_store(config):
    store = config.store
    config_id = config.identifier

    if config.configuration is not None:
        load_configuration(store, config_id, config.configuration)

    custom_module = None
    custom_store = None

    if config.module == 'mKTL.Daemon':
        # The mKTL import is here (as opposed to the top of the script) to allow
        # running this executable in contexts where the mKTL module may not be
        # on the default search path.
        import mKTL
        store_module = mKTL.Daemon
    else:
        store_module = importlib.import_module(config.module)

    store_subclass = getattr(store_module, config.subclass)
    started = store_subclass(store, config_id, config)

    return started


if __name__ == '__main__':
    main()


# vim: set expandtab tabstop=8 softtabstop=4 shiftwidth=4 autoindent:
