#! /usr/bin/env python3

description = """
The guide daemon acts as a broker for configuration requests; when daemons
first start running they will seek out any guides on their local network
and provide configuration updates; any clients broadcasting will discover
a local guide, and ask for any available configuration information.

Daemons and clients can both bypass broadcast discovery for a local guide
if they already know where to find a guide.
"""

import argparse
import threading

import mktl


def main():

    # We don't use command line options here, but if we did, they would be
    # parsed out in the following call. At the very least, it handles the
    # case where the caller specifies -h on the command line.

    config = parse_command_line()

    main.req = RequestServer()
    main.beacon = mktl.protocol.discover.Server(main.req.port)

    delay = 30
    ### It needs to be possible to manipulate this set from the
    ### RequestServer on a CONFIG 'push' request.
    known = set()

    while True:
        not_seen = set(known)
        discovered = mktl.protocol.discover.search_direct()

        for seen in discovered:
            if seen in known:
                not_seen.remove(seen)
                continue

            # This is a new daemon to us. Request its known hashes, which
            # also tells us which store names it has access to; cache any/all
            # configuration blocks discovered in this fashion.

            address,port = seen
            request = mktl.protocol.message.Request('HASH')
            payload = mktl.protocol.request.send(address, port, request)
            hashes = payload.value

            for store in hashes.keys():
                request = mktl.protocol.message.Request('CONFIG', store)
                payload = mktl.protocol.request.send(address, port, request)

                blocks = payload.value
                if blocks is None:
                    ## No data; there's probably an error we could inspect
                    ## and log here.
                    pass
                else:
                    mktl.config.add(store, blocks)

            known.add(seen)

        for missed in not_seen:
            known.remove(missed)

        try:
            main.shutdown.wait(delay)
        except (KeyboardInterrupt, SystemExit):
            break


main.shutdown = threading.Event()
main.req = None



def parse_command_line():

    arguments = dict()
    arguments['formatter_class'] = argparse.RawDescriptionHelpFormatter
    arguments['description'] = description
    ##arguments['epilog'] = epilog

    parser = argparse.ArgumentParser(**arguments)

    parsed = parser.parse_args()
    return parsed



class RequestServer(mktl.protocol.request.Server):
    """ Subclass the generic :class:mktl.protocol.request.Server`, adding
        additional logic to locally handle requests.
    """

    def checkKeys(self, new):
        """ Confirm that any keys unique to this new configuration block are
            not present in any other blocks.
        """

        new_items = new['items']
        new_keys = set()

        for key in new_items:
            item = new_items[key]

            if key in new_keys:
                raise KeyError('redundant key in configuration block: ' + key)

            new_keys.add(key)

        ### This really should be changed to be 'store' in the configuration
        ### syntax.

        store = new['name']

        try:
            known_blocks = mktl.config.get(store)
        except KeyError:
            # No previously stored blocks to check against. That's a pass.
            return

        for known_uuid in known_blocks.keys():

            if new['uuid'] == known_uuid:
                # Doesn't make sense to check a block for duplicates against
                # any version of itself. Skip this one.
                continue

            known = known_blocks[known_uuid]

            old_items = known['items']
            for key in old_items:
                item = old_items[key]

                if key in new_keys:
                    raise KeyError('key in new configuration block conflicts with an existing key: ' + key)


    def processConfigurationBlock(self, new):

        def get_stratum(provenance):
            return provenance['stratum']

        new['provenance'].sort(key=get_stratum)
        name = new['name']

        try:
            known_blocks = mktl.config.get(name)
        except KeyError:
            known_blocks = dict()

        local_provenance = dict()
        local_provenance['hostname'] = self.hostname
        local_provenance['req'] = self.port

        if mktl.config.contains_provenance(new, local_provenance):
            raise ProvenanceLoopError('circular provenance detected')

        to_add = list()
        unique = True

        for known_uuid in known_blocks.keys():

            new_uuid = new['uuid']

            if known_uuid != new['uuid']:
                continue

            known = known_blocks[known_uuid]
            unique = False

            if known['hash'] == new['hash']:
                continue

            if known['time'] < new['time']:
                to_add.append(new)

        if unique == True:
            # Reject a configuration block if it contains keys that collide
            # with another block in the cache. Not looking for a return
            # value here, exceptions are raised when there are problems.
            self.checkKeys(new)

            to_add.append(new)

        # Now that all the checks have passed it's time to update the local
        # cache of configuration data.

        for new in to_add:
            mktl.config.add_provenance(new, self.hostname, self.port)
            mktl.config.add(name, new)


    def req_config(self, request):
        """ When a daemon sets a configuration block it will include a 'value'
            segment in the request; an empty response is expected upon receipt
            of the configuration block. That 'value' segment is not present in a
            client request; a client expects a sequence of configuration blobs
            representing the full configuration of the store, one blob per
            daemon in the store.
        """

        store = request.target
        payload = request.payload

        if payload is not None:
            response = list()

            new_blocks = payload.value
            for uuid,new_block in new_blocks.items():
                try:
                    self.processConfigurationBlock(new_block)
                except ProvenanceLoopError:
                    # This configuration block came from us.
                    continue

        else:
            try:
                response = mktl.config.get(store)
            except KeyError:
                raise KeyError('no configuration available for ' + repr(store))


        payload = mktl.Payload(response)
        return payload


    def req_handler(self, socket, lock, ident, request):
        """ Inspect the incoming request type and decide how a response
            will be generated.
        """

        self.req_ack(socket, lock, ident, request)

        type = request.type
        target = request.target

        if type != 'HASH' and target == '':
            raise KeyError('invalid request, no store/name specified')

        if type == 'HASH':
            payload = self.req_hash(request)
        elif type == 'CONFIG':
            payload = self.req_config(request)
        else:
            raise ValueError('invalid request type: ' + type)

        return payload


    def req_hash(self, request):
        """ Return the hash of a configuration block for a requested store name,
            or all hashes for all locally known stores.
        """

        store = request.target
        if store == '':
            store = None

        try:
            hashes = mktl.config.get(store, hashes=True)
        except KeyError:
            raise KeyError('no local configuration for ' + repr(request))

        payload = mktl.Payload(hashes)
        return payload


# end of class RequestServer


class ProvenanceLoopError(RuntimeError):
    pass


if __name__ == '__main__':
    main()

# vim: set expandtab tabstop=8 softtabstop=4 shiftwidth=4 autoindent:
