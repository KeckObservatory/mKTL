The configuration syntax describes what it means to be a mKTL store,
enumerating the available keys and all their intrinsic metadata. This
document lays out the configuration syntax, as might be returned from
a CONFIG request, and additional conventions applied to configuration
data.

	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Refer to the protocol document for the expected format of a CONFIG request
and response. Only one aspect of the response is addressed here: the 'data'
value included in the response, which is a dictionary of dictionaries, each
dictionary representing a configuration 'block', keyed by the unique
identifier (UUID) associated with that block, providing a complete description
of a single daemon's keys; the sequence is intended to represent the full
namespace of a store, spanning the full set of daemons composing that store.

For example, the 'kpfguide' store may contain multiple daemons:

	{'uuid1': {'name': 'kpfguide', 'time': 1724892333.924, ...},
	 'uuid2': {'name': 'kpfguide', 'time': 1725892343.567, ...}}

A configuration block will contain the following fields:

	'name': the name of the store. This is perhaps redundant
		with other aspects of how the configuration block
		is stored and transmitted, but the extra assertion
		is inexpensive and convenient.

	'uuid': the unique identifier associated with this block.
		The UUID is generated internally and does not need
		to be manipulated directly; it is used to uniquely
		associate a specific daemon with its configuration
		block, as might be necessary when a client needs
		to apply continuity (such as clearing local cache)
		when a configuration block changes.

	'provenance': the chain of handling for this configuration
		block. The provenance is a sequence, listing every
		daemon between the client and the original source
		of authority for the block. Each element in the
		sequence contains a stratum, hostname, and port;
		clients want to connect to the stratum zero entry
		to handle any requests.

	'time': daemon-provided timestamp for the contents of this
		block. The timestamp may change even if the contents
		(and hash) do not.

	'hash': a hash value for the 'keys' component of this block.
		The hash is arbitrary and clients should not concern
		themselves validating the contents of the block with
		the hash; a change in the hash is used to signify the
		contents have changed, and any/all clients relying on
		the contents should update their cached data.

	'keys': a dictionary of dictionaries, keyed by the key name,
		with one dictionary containing the full description
		of a single key. The description of an key is discussed
		in its own section below.

	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Similar to the configuration block for a store, the dictionary describing
a key contains a set of fields that provide a complete description of the key.

	'name': a terse string naming this key. The key name must
		be unique across the entire store, not just within
		this configuration block.

	'type': the data type for the value associated with this
		key. The type is one of: boolean, bulk, double,
		double array, enumerated, integer, integer array,
		mask, or string. The type is not strictly required,
		but it is a useful hint for what the value is expected
		to be. A more complete description of key types is
		below.

	'description': a human-readable description of what this key
		represents. Could be one sentence, could be several;
		ideally the reader can use this information to fully
		understand the intent and function of the key/value
		pair.

	'units': terse description of the units for a numeric value.
		If the value has multiple representations, there
		could be a units value for each representation, for
		example an angular value transmitted as radians but
		also expressed in sexagesimal.

	'gettable': generally not specified unless set to 'false',
		which indicates this key will reject any attempts
		to get its value. The use of this property is highly
		discouraged, any key should have a meaningful value;
		this property only exists for backwards compatibility.

	'settable': generally not specified unless set to 'false',
		which indicates this key will reject any attempts
		to set a new value.

	'enumerators': a dictionary mapping a human-readable string
		representation to numeric values. This is only
		meaningful for boolean, enumerated, and mask types.
		An example set of enumerators for a boolean key
		might be {'0': 'False', '1': 'True'}. Note that
		in JSON a dictionary key must be a string, these
		values can and should be cast back to integers
		after the JSON is parsed.

	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Each value type may be associated with one or more optional directives from
the set above. Note that any value could also be empty, as expressed with the
JSON null value.

	'boolean': a two-state integer, either 0 or 1, with a string
		representation that is usually something like false/true,
		off/on, out/in, etc. The "truth" value should always map
		to 1, though there will be some backwards-compatible
		instances where a badly configured boolean value does
		not adhere to this standard. A boolean is effectively
		an enumerated value with only two enumerators.

	'bulk': a true data array, analagous to a Numpy array, unlike
		the legacy "numeric array" type, which is more like a
		dictionary or named sequence.

	'numeric': a numeric value, either a floating point number or
		an integer. A numeric value will generally have a
		'units' property defined.

	'numeric array': a sequence of numeric values, often with
		enumerators describing the individual values. This is
		a legacy type definition intended solely for backwards
		compatibility.

	'enumerated': an integer value with a string representation
		for each valid value. The valid enumerators are listed
		in the 'enumerators' configuration property.

	'mask': an integer value with a string representation for each
		of the possible bits in the integer. The enumerators
		reflect the status for each bit, counting from zero;
		the '0' enumerator represents the mask value if the
		zeroth bit is active, the '1' bit represents the value
		if the next bit is set, and so on. If a mask has multiple
		active bits the string representation is a concatenation
		of the relevant strings, joined by commas. The "none"
		enumerator reflects the string value if no bits are set.

	'string': a text string of arbitrary length.

	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Here is a two-key example for what a "full" configuration block may look like
in its JSON format:

      {
        "name": "pie",
        "hash": 236000907473448652729473003892320198915,
        "uuid": "8017ad5b-07a7-5135-a024-c46a0b79b74e",
        "time": 1738177027.4993615,
        "provenance": [
          {
            "stratum": 0,
            "hostname": "chonk",
            "port": 10112
          }
        ]
        "keys": {
          "ANGLE": {
            "type": "double",
            "units": {
              "asc": "h",
              "bin": "rad"
            },
            "description": "Writable angle keyword."
          },
          "DISPSTOP": {
            "type": "boolean",
            "description": "Dispatcher shutdown command. Tells dispatcher to exe
cute a clean shutdown.",
            "enumerators": {
                "0": "no",
                "1": "yes"
            }
          }
	}
      }

	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Filesystem locations

        $HOME/
        $HOME/.mKTL/
        $HOME/.mKTL/client/cache/
        $HOME/.mKTL/client/cache/pie/
        $HOME/.mKTL/client/cache/pie/foo_uuid.json

        $HOME/.mKTL/daemon/store/
        $HOME/.mKTL/daemon/store/pie/
        $HOME/.mKTL/daemon/store/pie/config
        $HOME/.mKTL/daemon/store/pie/foo.json
        $HOME/.mKTL/daemon/store/pie/foo.uuid



Uniqueness constraint

When a daemon provides authoritative access to a set of keys, the daemon must be provide unique identification so that clients and other intermediaries can associate a configuration block with a specific daemon. A daemon may be listening on any port; it may be running on any host; there may be multiple daemons composing a single store running on a single host. The host address and port number are sufficient to locate the daemon, but they are not adequate to uniquely identify the configuration block it provides; the hash of the configuration contents is sufficient to highlight changes in configuration data, but cannot be used to track configuration blocks across changes. This motivates the need for a persistent unique identifier associated with the running daemon.

To facilitate ease-of-use, the unique identifier does not need to be specified in advance. The first time a daemon runs it will generate a UUID that will be cached and reused for future restarts. This UUID must be stored alongside the runtime configuration data; it must not be stored in the configuration data, to avoid it being overwritten by any preprocessing tools used to generate configuration blocks.

In circumstances where a daemon with an established UUID is being replaced, the path of least resistance is to copy that UUID into the privileged location. A new UUID can also be tagged as superceding a previous UUID, which is the indication to a client that they should forget the configuration block associated with the old UUID.


On-disk layout

The default location for any stored configuration data is $HOME/.mKTL. The subdirectory structure from that point is:

	cache/
	    store1/
	        6a7904d6-7587-4b77-976d-1e63760090d4.json
		91ffb810-44d6-439b-907e-30212a9961c6.json
	    store2/
	        58a474c5-6b71-424a-ada6-1fdc2eb1ed56.json
	    store3/
	        59f68c12-fbd0-415a-ace7-7d7d25e3d9f2.json

	local/
	    store1/
	        any_custom_string.json
		any_custom_string.uuid
	        other_custom_string.json
		other_custom_string.uuid
	    store3/
	        a_third_custom_string.json
		a_third_custom_string.uuid

The contents of the cache/ subdirectory are programmatically populated and shouldn't need to be manipulated directly by servers or clients. The local/ subdirectory contains data for stores served by daemons running on that computer, from that account; if, on first startup, the .uuid file is missing or empty, it will be generated at runtime. The .json file for that arbitrary filename contains the full description of the keys handled by that specific daemon, the 'data' component of the response to a CONFIG request.
